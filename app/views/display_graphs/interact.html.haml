-# this probably goes into assets somewhere
<script src="http://dev.graphreviewer.ly:8080/socket.io/socket.io.js"></script>

-# sets the graph structure variable so that is available to paper
:javascript
  var initial_graph_structure = #{@display_graph.to_json.to_json};
  var graph_structure_changes = {}
  var socket_id = 0
  var display_graph_id = #{@display_graph.id}

  var socket = io.connect('http://dev.graphreviewer.ly:8080', { display_graph_id: display_graph_id })
  socket.on('init_data', function(data)  {
    socket_id = data.my_id
    socket.emit('register_user', { display_graph_id: display_graph_id });
  });

  function send_changes_to_server(structure_changes)  {
    var output = { display_graph_id: display_graph_id, changes: structure_changes }
    socket.emit('structure_changes', output)
  }

  socket.on('structure_changes', function(data)  {
    graph_structure_changes = data.changes
    //console.log("received changes")
    //console.log(graph_structure_changes)
  });

= render :partial => "/tokens/generate_token"

<canvas id="display_graph_canvas" width="960" height="500" keepalive="true">
</canvas>

:plain
  <script type='text/paperscript' canvas='display_graph_canvas'>
    var hit_options = {
      fill: true,
      tolerance: 5,
    }

    var Graph = Base.extend({
      name: "",
      id: 0,
      nodes: {},
      connections: {},
      selected_node: null,
      initialize: function(graph_structure)  {
        this.name = graph_structure.name
        this.id = graph_structure.id

        for(var i = 0; i < graph_structure.nodes.length; i++)  {
          node_attributes = graph_structure.nodes[i]
          this.nodes[node_attributes.id] = new Node(this, node_attributes)
        }
        for(var i = 0; i < graph_structure.connections.length; i++)  {
          connection_attributes = graph_structure.connections[i]
          this.connections[connection_attributes.id] = new Connection(this, connection_attributes)
        }
      },
      find_node_by_id: function(id)  {
        return this.nodes[id]
      },
      handle_mouse_down: function(event)  {
        var hit_result = project.hitTest(event.point, hit_options);
        this.selected_path = null;
        if(hit_result && hit_result.type == 'fill')  {
          for(var key in this.nodes)  {
            if(this.nodes[key].rounded_rect == hit_result.item)  {
              this.selected_path = this.nodes[key] 
            }
          }
        }
      },
      handle_mouse_move: function(event)  {
        var hit_result = project.hitTest(event.point, hit_options);
        project.activeLayer.selected = false;
        if (hit_result && hit_result.item)  {
          hit_result.item.selected = true;
        }
      },
      handle_mouse_drag: function(event)  {
        if(this.selected_path)  {
          this.selected_path.update_position(event.delta)
        }
      },
      redraw: function()  {
        for(var key in this.nodes)  {
          this.nodes[key].redraw()
        }
        for(var key in this.connections)  {
          this.connections[key].redraw()
        }
      },
      get_changes: function()  {
        var changes = {}
        for(var key in this.nodes)  {
          if(this.nodes[key].changed)  {
            changes[key] = this.nodes[key].get_changes()
          }
        }
        return changes
      },
    });

    var Node = Base.extend({
      graph: null,
      id: 0,
      position: null,
      bounding_box: null,
      rounded_rect: null,
      text: null,
      scale: 0,
      name: "",
      changed: false,
      fields: {},
      initialize: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.scale = attributes.scale
        this.name = attributes.name
        for(var field_attributes in attributes.fields)  {
          this.fields[field_attributes.id] = new Field(this.graph, field_attributes)
        }

        this.position = new Point(attributes.x_pos, attributes.y_pos)
        var rectangle_size = new Size(200, 40)
        this.bounding_box = new Rectangle(this.position, rectangle_size)
        var corner_size = new Size(10, 10)
        this.rounded_rect = new Path.RoundRectangle(this.bounding_box, corner_size)
        this.rounded_rect.style = {
          fillColor: "black",
          strokeColor: "green",
        }

        this.text = new PointText(this.center)
        this.text.paragraphStyle.justification = 'center'
        this.text.characterStyle.fontSize = 10 * this.scale
        this.text.fillColor = 'green'
        this.text.content = this.name
      },
      center: function()  {
        return this.position
      },
      update_position: function(delta)  {
        this.position += delta
        this.update_parts()
        this.changed = true
      },
      update_parts: function()  {
        this.bounding_box.point = this.position
        this.rounded_rect.position = this.bounding_box.point
        this.text.position = this.position
      },
      //when you get the changes, set changed to false
      get_changes: function()  {
        if(this.changed)  {
          this.changed = false
          var changes = {
            x_pos: this.position.x,
            y_pos: this.position.y,
            scale: this.scale,
          }
          return changes
        }
      },
      //if not changed, and there are updated in the changes object
      //the change the position and scale to the given position and scale
      redraw: function()  {
        if(!this.changed && graph_structure_changes.hasOwnProperty(this.id))  {
          changed_node = graph_structure_changes[this.id]
          if(changed_node)  {
            this.position.x = changed_node.x_pos
            this.position.y = changed_node.y_pos
            this.scale = changed_node.scale
            this.update_parts()
          }
        }
      },
    });

    var Field = Base.extend({
      graph: null,
      id: 0,
      name: "",
      initializer: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.name = attributes.name
      },
    });

    var Connection = Base.extend({
      graph: null,
      id: 0,
      //instead of storing ids, we could just store a full link to the node
      //possibly save some processing time
      start_node_id: 0,
      end_node_id: 0,
      start_type: "",
      end_type: "",
      line_type: "",
      weight: "",
      path: null,
      initialize: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.start_node_id = attributes.start_node_id
        this.end_node_id = attributes.end_node_id
        this.start_type = attributes.start_type
        this.end_type = attributes.end_type
        this.line_type = attributes.line_type
        this.weight = attributes.weight

        this.create_or_update_path()
      },
      //checks if both nodes exist, then sets the connection to their location
      create_or_update_path: function()  {
        //if it exists, assume everything is fine
        if(this.path)  {
          this.path.segments[0].point = this.graph.find_node_by_id(this.start_node_id).center()
          this.path.segments[1].point = this.graph.find_node_by_id(this.end_node_id).center()
        } else {
          var start_node = this.graph.find_node_by_id(this.start_node_id)
          var end_node = this.graph.find_node_by_id(this.end_node_id)
          if(start_node && end_node)  {
            this.path = new Path()
            this.path.add(start_node.center())
            this.path.add(end_node.center())
            this.path.style = {
              strokeColor: "green",
              strokeWidth: 1, //no support for weight yet
              //no support for line type yet
            }
          }
        }
      },
      redraw: function()  {
        this.create_or_update_path()
      },
    });

    //setup the canvas
    var background = new Path.Rectangle(view.bounds);
    background.fillColor = 'black';

    graph = new Graph(initial_graph_structure);

    function onFrame(event)  {
      graph.redraw();
      graph_structure_changes = graph.get_changes()

      // get the size of the changes
      // seems sort of silly
      var count = 0;
      for (var p in graph_structure_changes) {
        if (graph_structure_changes.hasOwnProperty(p)) {
          count++;
        }
      }
      if(count > 0)  {
        send_changes_to_server(graph_structure_changes)
      }
    }

    function onMouseDown(event)  {
      graph.handle_mouse_down(event)
    }

    function onMouseMove(event)  {
      graph.handle_mouse_move(event)
    }

    function onMouseDrag(event)  {
      graph.handle_mouse_drag(event)
    }
  </script>
