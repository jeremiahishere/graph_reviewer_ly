-# sets the graph structure variable so that is available to paper
:javascript
  graph_structure = #{@display_graph.to_json.to_json};

= render :partial => "/tokens/generate_token"

<canvas id="display_graph_canvas" width="960" height="500">
</canvas>

:javascript
  $(document).ready(function()  {
    
    function get_graph_structure()  {
      $.ajax({
        url: "#{get_display_graph_structure_path(@display_graph)}",
        dataType: "json",
        type: "GET",
        success: function(data)  {
          graph_structure = data
        }
      });
    }

    function set_graph_structure()  {
      $.ajax({
        url: "#{set_display_graph_structure_path(@display_graph)}",
        data: "graph_structure=" + JSON.stringify(graph_structure),
        dataType: "json",
        type: "POST",
        success: function(data)  {
          //not doing anything here for now
        }
      });
    }

    function start_sending_updates() {
      setInterval(function(){ set_graph_structure() }, 5000);
    }

    //get_graph_structure();
    //setTimeout(function(){ start_sending_updates()}, 2000);
  });

:plain
  <script type='text/paperscript' canvas='display_graph_canvas'>
    var hit_options = {
      fill: true,
      tolerance: 5,
    }

    var Graph = Base.extend({
      name: "",
      id: 0,
      nodes: {},
      connections: {},
      selected_node: null,
      initialize: function(graph_structure)  {
        this.name = graph_structure.name
        this.id = graph_structure.id

        for(var i = 0; i < graph_structure.nodes.length; i++)  {
          node_attributes = graph_structure.nodes[i]
          this.nodes[node_attributes.id] = new Node(this, node_attributes)
        }
        for(var i = 0; i < graph_structure.connections.length; i++)  {
          connection_attributes = graph_structure.connections[i]
          this.connections[connection_attributes.id] = new Connection(this, connection_attributes)
        }

        //I don't know why this doesn't work
        //for(var node_attributes in graph_structure.nodes)  {
        //  this.nodes[node_attributes.id] = new Node(this, node_attributes)
        //}
        //for(var connection_attributes in graph_structure.connections)  {
        //  this.connections[connection_attributes.id] = new Node(this, connection_attributes)
        //}

      },
      handle_mouse_down: function(event)  {
        var hit_result = project.hitTest(event.point, hit_options);
        if(hit_result.type == 'fill')  {
          this.selected_path = hit_result.item
          project.activeLayer.addChild(hit_result.item)
        } else {
          this.selected_path = null;
        }
      },
      handle_mouse_move: function(event)  {
        var hit_result = project.hitTest(event.point, hit_options);
        project.activeLayer.selected = false;
        if (hit_result && hit_result.item)  {
          hit_result.item.selected = true;
        }
      },
      handle_mouse_drag: function(event)  {
        if(this.selected_path)  {
          console.log(this.selected_path)
          this.selected_path.update_position(event.delta)
        }
      },
      redraw: function()  {
      },
    });

    var Node = Base.extend({
      graph: null,
      id: 0,
      position: null,
      bounding_box: null,
      text: null,
      scale: 0,
      name: "",
      fields: {},
      initialize: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.scale = attributes.scale
        this.name = attributes.name
        for(var field_attributes in attributes.fields)  {
          this.fields[field_attributes.id] = new Field(this.graph, field_attributes)
        }

        this.position = new Point(attributes.x_pos, attributes.y_pos)
        var rectangle_size = new Size(150, 200)
        var rectangle = new Rectangle(this.position, rectangle_size)
        var corner_size = new Size(10, 10)
        this.bounding_box = new Path.RoundRectangle(rectangle, corner_size)
        this.bounding_box.style = {
          fillColor: "black",
          strokeColor: "green",
        }

        this.text = new PointText(rectangle.center)
        this.text.paragraphStyle.justification = 'center'
        this.text.characterStyle.fontSize = 10 * this.scale
        this.text.fillColor = 'green'
        this.text.content = this.name
      },
      update_position: function(delta)  {
        this.position += delta
        this.text.position += delta
      },
    });

    var Field = Base.extend({
      graph: null,
      id: 0,
      name: "",
      initializer: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.name = attributes.name
      },
    });

    var Connection = Base.extend({
      graph: null,
      id: 0,
      start_node_id: 0,
      end_node_id: 0,
      //start_node: null,
      //end_node: null,
      start_type: "",
      end_type: "",
      line_type: "",
      weight: "",
      initialize: function(graph, attributes)  {
        this.graph = graph

        this.id = attributes.id
        this.start_node_id = attributes.start_node_id
        this.end_node_id = attributes.end_node_id
        this.start_type = attributes.start_type
        this.end_type = attributes.end_type
        this.line_type = attributes.line_type
        this.weight = attributes.weight
      },
      update_position: function(delta)  {
        //not sure why this is needed
      },
    });

    //setup the canvas
    //var background = new Path.Rectangle(view.bounds);
    //background.fillColor = 'black';

    graph = new Graph(graph_structure);

    function onFrame(event)  {
      graph.redraw();
    }

    function onMouseDown(event)  {
      graph.handle_mouse_down(event)
    }

    function onMouseMove(event)  {
      graph.handle_mouse_move(event)
    }

    function onMouseDrag(event)  {
      graph.handle_mouse_drag(event)
    }
  </script>
